/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.disfruta.view.admin;

import com.disfruta.bean.admin.DetallePerfilUsuario;
import com.disfruta.bean.admin.Menu;
import com.disfruta.bean.admin.PerfilUsuario;
import com.disfruta.bean.admin.TipoUserDesktop;
import com.disfruta.bean.admin.UsuarioDesktop;
import com.disfruta.gestion.admin.GestionDetallePerfilUsuario;
import com.disfruta.gestion.admin.GestionPerfilUsuario;
import com.disfruta.gestion.admin.GestionTipoUserDesktop;
import com.disfruta.gestion.admin.GestionUsuarioDesktop;
import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import resources.auxiliar.PaddingLeft;

/**
 *
 * @author Juape
 */
public final class PanelUsuarios extends javax.swing.JPanel {

    protected resources.tablemodel.ModelTableEmpleados modelTableEmpleados;
    protected resources.tablemodel.ModelTablePerfilUsuario modelTablePerfilUser;
    protected resources.comboboxmodel.CboModelTipoUserDesktop modelCboTipoUser;
    protected resources.comboboxmodel.CboModelPerfilUsuario modelCboPerfilUser;
    private ArrayList<Menu> lista;
    private ArrayList<PerfilUsuario> perfilesSelected;
    private ArrayList<Menu> itemsMenuSelect = new ArrayList<>();
    protected String control = "nuevo";
    protected String urlFoto = "";

    /**
     * Creates new form PanelUsuarios
     */
    public PanelUsuarios() throws ClassNotFoundException, Exception {
        init();
        initComponents();
        this.tblEmpleados.setModel(modelTableEmpleados);
        this.cboTipoUsuario.setModel(modelCboTipoUser);
        this.cboPerfilUsuario.setModel(modelCboPerfilUser);
        this.tblPerfilesUsuario.setModel(modelTablePerfilUser);
        setPadding();
    }

    private void init() {
        try {
            this.modelTableEmpleados = new resources.tablemodel.ModelTableEmpleados(new GestionUsuarioDesktop().listar());
            this.modelCboTipoUser = new resources.comboboxmodel.CboModelTipoUserDesktop(new GestionTipoUserDesktop().listar());
            this.modelCboPerfilUser = new resources.comboboxmodel.CboModelPerfilUsuario(new GestionPerfilUsuario().listar());
            this.perfilesSelected = new ArrayList();
            this.modelTablePerfilUser = new resources.tablemodel.ModelTablePerfilUsuario(this.perfilesSelected);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PanelUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(PanelUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setPadding() {
        PaddingLeft.agregarpadding(this.txtNombreUsuario);
        PaddingLeft.agregarpadding(this.txtApellidosUsuario);
        PaddingLeft.agregarpadding(this.txtFechaNac);
        PaddingLeft.agregarpadding(this.txtEmail);
        PaddingLeft.agregarpadding(this.txtDireccion);
        PaddingLeft.agregarpadding(this.txtCelular);
        PaddingLeft.agregarpadding(this.txtUsuario);
        PaddingLeft.agregarpadding(this.txtPassword);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneltitlealmacen = new javax.swing.JPanel();
        logoalmacen = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnNuevoUsuario = new javax.swing.JButton();
        btnGuardarUsuario = new javax.swing.JButton();
        btnEliminarUsuario = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmpleados = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        CboEstado = new javax.swing.JComboBox();
        txtNombreUsuario = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cboTipoUsuario = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cboLocal = new javax.swing.JComboBox();
        txtApellidosUsuario = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtFechaNac = new javax.swing.JTextField();
        txtUsuario = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cboSexo = new javax.swing.JComboBox();
        txtPassword = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCelular = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        lblFoto = new javax.swing.JLabel();
        panelContainerJtree = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        cboPerfilUsuario = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPerfilesUsuario = new javax.swing.JTable();
        btnAddPerfil = new javax.swing.JButton();
        btnQuitarPerfil = new javax.swing.JButton();
        btnSubirFoto = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(960, 590));
        setPreferredSize(new java.awt.Dimension(960, 590));

        paneltitlealmacen.setBackground(new java.awt.Color(238, 189, 122));
        paneltitlealmacen.setPreferredSize(new java.awt.Dimension(960, 60));

        logoalmacen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/almacen.gif"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Empleados");

        btnNuevoUsuario.setBackground(new java.awt.Color(255, 255, 255));
        btnNuevoUsuario.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 11)); // NOI18N
        btnNuevoUsuario.setForeground(new java.awt.Color(229, 147, 35));
        btnNuevoUsuario.setText("Nuevo");
        btnNuevoUsuario.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 0, true));
        btnNuevoUsuario.setBorderPainted(false);
        btnNuevoUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNuevoUsuario.setFocusPainted(false);
        btnNuevoUsuario.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNuevoUsuario.setOpaque(false);
        btnNuevoUsuario.setPreferredSize(new java.awt.Dimension(92, 30));
        btnNuevoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoUsuarioActionPerformed(evt);
            }
        });

        btnGuardarUsuario.setBackground(new java.awt.Color(252, 242, 228));
        btnGuardarUsuario.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 11)); // NOI18N
        btnGuardarUsuario.setForeground(new java.awt.Color(83, 71, 65));
        btnGuardarUsuario.setText("Guardar");
        btnGuardarUsuario.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 0, true));
        btnGuardarUsuario.setBorderPainted(false);
        btnGuardarUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardarUsuario.setFocusPainted(false);
        btnGuardarUsuario.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuardarUsuario.setOpaque(false);
        btnGuardarUsuario.setPreferredSize(new java.awt.Dimension(92, 30));
        btnGuardarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarUsuarioActionPerformed(evt);
            }
        });

        btnEliminarUsuario.setBackground(new java.awt.Color(229, 147, 35));
        btnEliminarUsuario.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 11)); // NOI18N
        btnEliminarUsuario.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarUsuario.setText("Eliminar");
        btnEliminarUsuario.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 0, true));
        btnEliminarUsuario.setBorderPainted(false);
        btnEliminarUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarUsuario.setFocusPainted(false);
        btnEliminarUsuario.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEliminarUsuario.setOpaque(false);
        btnEliminarUsuario.setPreferredSize(new java.awt.Dimension(92, 30));
        btnEliminarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneltitlealmacenLayout = new javax.swing.GroupLayout(paneltitlealmacen);
        paneltitlealmacen.setLayout(paneltitlealmacenLayout);
        paneltitlealmacenLayout.setHorizontalGroup(
            paneltitlealmacenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneltitlealmacenLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(logoalmacen)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(193, 193, 193)
                .addComponent(btnNuevoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGuardarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(290, Short.MAX_VALUE))
        );
        paneltitlealmacenLayout.setVerticalGroup(
            paneltitlealmacenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneltitlealmacenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoalmacen)
                .addGap(16, 16, 16))
            .addGroup(paneltitlealmacenLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(paneltitlealmacenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(paneltitlealmacenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnNuevoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnGuardarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEliminarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tblEmpleados.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tblEmpleados.setForeground(new java.awt.Color(51, 51, 51));
        tblEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblEmpleados.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblEmpleados.setSelectionBackground(new java.awt.Color(238, 189, 122));
        tblEmpleados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEmpleadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblEmpleados);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 915, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Lista de Empleados", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel14.setText("Estado:");

        CboEstado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Activo", "Desactivo" }));

        txtNombreUsuario.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        txtNombreUsuario.setToolTipText("");
        txtNombreUsuario.setAlignmentX(0.0F);
        txtNombreUsuario.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(230, 230, 230), 1, true));
        txtNombreUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtNombreUsuario.setMargin(new java.awt.Insets(0, 0, 0, 0));
        txtNombreUsuario.setName("txtusuario"); // NOI18N
        txtNombreUsuario.setPreferredSize(new java.awt.Dimension(280, 24));
        txtNombreUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreUsuarioActionPerformed(evt);
            }
        });

        jLabel13.setText("Tipo de usuario:");

        jLabel2.setText("Nombres:");

        cboTipoUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Administrador", "Staff", "Gerente", "Dueño", "Cocina" }));
        cboTipoUsuario.setToolTipText("");

        jLabel3.setText("Apellidos:");

        cboLocal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Local 1", "Local 2" }));

        txtApellidosUsuario.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        txtApellidosUsuario.setToolTipText("");
        txtApellidosUsuario.setAlignmentX(0.0F);
        txtApellidosUsuario.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(230, 230, 230), 1, true));
        txtApellidosUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtApellidosUsuario.setMargin(new java.awt.Insets(0, 0, 0, 0));
        txtApellidosUsuario.setName("txtusuario"); // NOI18N
        txtApellidosUsuario.setPreferredSize(new java.awt.Dimension(280, 24));
        txtApellidosUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidosUsuarioActionPerformed(evt);
            }
        });

        jLabel12.setText("Contraseña:");

        jLabel4.setText("Fecha de nacimiento:");

        jLabel11.setText("Local:");

        txtFechaNac.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        txtFechaNac.setForeground(new java.awt.Color(153, 153, 153));
        txtFechaNac.setToolTipText("");
        txtFechaNac.setAlignmentX(0.0F);
        txtFechaNac.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(230, 230, 230), 1, true));
        txtFechaNac.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtFechaNac.setMargin(new java.awt.Insets(0, 0, 0, 0));
        txtFechaNac.setName("txtusuario"); // NOI18N
        txtFechaNac.setPreferredSize(new java.awt.Dimension(280, 24));
        txtFechaNac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaNacActionPerformed(evt);
            }
        });

        txtUsuario.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        txtUsuario.setForeground(new java.awt.Color(153, 153, 153));
        txtUsuario.setToolTipText("");
        txtUsuario.setAlignmentX(0.0F);
        txtUsuario.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(230, 230, 230), 1, true));
        txtUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtUsuario.setMargin(new java.awt.Insets(0, 0, 0, 0));
        txtUsuario.setName("txtusuario"); // NOI18N
        txtUsuario.setPreferredSize(new java.awt.Dimension(280, 24));
        txtUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsuarioActionPerformed(evt);
            }
        });

        jLabel5.setText("Sexo:");

        cboSexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Hombre", "Mujer" }));

        txtPassword.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        txtPassword.setForeground(new java.awt.Color(153, 153, 153));
        txtPassword.setToolTipText("");
        txtPassword.setAlignmentX(0.0F);
        txtPassword.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(230, 230, 230), 1, true));
        txtPassword.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtPassword.setMargin(new java.awt.Insets(0, 0, 0, 0));
        txtPassword.setName("txtusuario"); // NOI18N
        txtPassword.setPreferredSize(new java.awt.Dimension(280, 24));
        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        jLabel10.setText("Usuario:");

        jLabel9.setText("Datos de cuenta");

        jLabel8.setText("Foto :");

        txtDireccion.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        txtDireccion.setForeground(new java.awt.Color(153, 153, 153));
        txtDireccion.setToolTipText("");
        txtDireccion.setAlignmentX(0.0F);
        txtDireccion.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(230, 230, 230), 1, true));
        txtDireccion.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtDireccion.setMargin(new java.awt.Insets(0, 0, 0, 0));
        txtDireccion.setName("txtusuario"); // NOI18N
        txtDireccion.setPreferredSize(new java.awt.Dimension(280, 24));
        txtDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDireccionActionPerformed(evt);
            }
        });

        jLabel16.setText("Asignar perfil:");

        jLabel7.setText("Dirección:");

        txtEmail.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        txtEmail.setForeground(new java.awt.Color(153, 153, 153));
        txtEmail.setToolTipText("");
        txtEmail.setAlignmentX(0.0F);
        txtEmail.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(230, 230, 230), 1, true));
        txtEmail.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtEmail.setMargin(new java.awt.Insets(0, 0, 0, 0));
        txtEmail.setName("txtusuario"); // NOI18N
        txtEmail.setPreferredSize(new java.awt.Dimension(280, 24));
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        jLabel6.setText("Correo electrónico:");

        txtCelular.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        txtCelular.setForeground(new java.awt.Color(153, 153, 153));
        txtCelular.setToolTipText("");
        txtCelular.setAlignmentX(0.0F);
        txtCelular.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(230, 230, 230), 1, true));
        txtCelular.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtCelular.setMargin(new java.awt.Insets(0, 0, 0, 0));
        txtCelular.setName("txtusuario"); // NOI18N
        txtCelular.setPreferredSize(new java.awt.Dimension(280, 24));
        txtCelular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCelularActionPerformed(evt);
            }
        });

        jLabel15.setText("Nº Celular:");

        lblFoto.setBackground(new java.awt.Color(51, 51, 51));
        lblFoto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fotoPerfil.png"))); // NOI18N

        panelContainerJtree.setBackground(new java.awt.Color(255, 255, 255));
        panelContainerJtree.setPreferredSize(new java.awt.Dimension(500, 480));

        jLabel17.setText("Perfil :");

        cboPerfilUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tblPerfilesUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblPerfilesUsuario);

        btnAddPerfil.setText("+");
        btnAddPerfil.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPerfilActionPerformed(evt);
            }
        });

        btnQuitarPerfil.setText("-");
        btnQuitarPerfil.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnQuitarPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarPerfilActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelContainerJtreeLayout = new javax.swing.GroupLayout(panelContainerJtree);
        panelContainerJtree.setLayout(panelContainerJtreeLayout);
        panelContainerJtreeLayout.setHorizontalGroup(
            panelContainerJtreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContainerJtreeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelContainerJtreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelContainerJtreeLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboPerfilUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnAddPerfil)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnQuitarPerfil))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(440, Short.MAX_VALUE))
        );
        panelContainerJtreeLayout.setVerticalGroup(
            panelContainerJtreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContainerJtreeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelContainerJtreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(cboPerfilUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddPerfil)
                    .addComponent(btnQuitarPerfil))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(311, 311, 311))
        );

        btnSubirFoto.setText("Cargar foto");
        btnSubirFoto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSubirFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubirFotoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1)
                    .addComponent(jLabel9)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(txtApellidosUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(txtNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cboSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)))
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(jLabel7)
                            .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFoto, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(btnSubirFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboTipoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(panelContainerJtree, javax.swing.GroupLayout.PREFERRED_SIZE, 875, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jLabel16)))
                .addGap(29, 29, 29))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel8)
                    .addComponent(jLabel16))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtApellidosUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSubirFoto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboTipoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelContainerJtree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        jTabbedPane1.addTab("Información de Empleado", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneltitlealmacen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(paneltitlealmacen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarUsuarioActionPerformed
        try {
            // TODO add your handling code here:

            UsuarioDesktop user = null;
            if (this.control.equals("nuevo")) {
                user = new UsuarioDesktop();
            } else if (this.control.equals("modificar")) {
                user = this.modelTableEmpleados.getValue(this.tblEmpleados.getSelectedRow());
            }
            user.setNombres(this.txtNombreUsuario.getText());
            user.setApellidos(this.txtApellidosUsuario.getText());
            user.setFechNacimiento(this.txtFechaNac.getText());
            user.setDni("");
            user.setEmail(this.txtEmail.getText());
            user.setCelular(this.txtCelular.getText());
            user.setUsuario(this.txtUsuario.getText());
            user.setPassword(this.txtPassword.getText());
            int r = this.cboSexo.getSelectedIndex();
            if (r == 1) {
                user.setSexo("H");
            } else if (r == 2) {
                user.setSexo("M");
            } else {
                JOptionPane.showMessageDialog(this, "Seleccionar un sexo!");
            }
            TipoUserDesktop tipo = this.modelCboTipoUser.getElement(this.cboTipoUsuario.getSelectedIndex());
            user.setTipoUser(tipo);

            int e = this.CboEstado.getSelectedIndex();
            if (e == 1) {
                user.setEstado("A");
            } else if (e == 2) {
                user.setEstado("D");
            } else {
                JOptionPane.showMessageDialog(this, "Seleccionar un estado!");
            }
            user.setFoto(this.urlFoto);

            GestionUsuarioDesktop gestion = new GestionUsuarioDesktop();
            GestionDetallePerfilUsuario gestionperfiluser = new GestionDetallePerfilUsuario();
            if (this.control.equals("nuevo")) {
                try {
                    //insertar
                    user.setTipoOperacion("i");
                    String rp = gestion.registrar(user);
                    UsuarioDesktop obj = gestion.getUltimoObject();
                    for (int i = 0; i < this.perfilesSelected.size(); i++) {
                        DetallePerfilUsuario objinsert = new DetallePerfilUsuario();
                        objinsert.setPerfil(this.perfilesSelected.get(i));
                        objinsert.setUsuario(obj);
                        objinsert.setEstado("A");
                        objinsert.setTipoOperacion("i");
                        gestionperfiluser.registrar(objinsert);
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(PanelUsuarios.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(PanelUsuarios.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if (this.control.equals("modificar")) {
                //modificar
                user.setTipoOperacion("a");
                String rp = gestion.actualizar(user);
                DetallePerfilUsuario objdel = new DetallePerfilUsuario();
                objdel.setUsuario(user);
                PerfilUsuario p = new PerfilUsuario();
                p.setIdprefil(0);
                objdel.setPerfil(p);
                objdel.setEstado("A");
                objdel.setTipoOperacion("e");
                gestionperfiluser.eliminar(objdel);
                for (int i = 0; i < this.perfilesSelected.size(); i++) {
                    DetallePerfilUsuario objinsert = new DetallePerfilUsuario();
                    objinsert.setPerfil(this.perfilesSelected.get(i));
                    objinsert.setUsuario(user);
                    objinsert.setEstado("A");
                    objinsert.setTipoOperacion("i");
                    gestionperfiluser.registrar(objinsert);
                }
            }

            JOptionPane.showMessageDialog(this, "Registrado correctamente !!");
            this.modelTableEmpleados.setData(new GestionUsuarioDesktop().listar());
            this.modelTableEmpleados.fireTableDataChanged();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PanelUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(PanelUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarUsuarioActionPerformed

    private void btnNuevoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoUsuarioActionPerformed
        // TODO add your handling code here:
        this.txtNombreUsuario.setText("");
        this.txtApellidosUsuario.setText("");
        this.txtFechaNac.setText("");
        this.txtEmail.setText("");
        this.txtDireccion.setText("");
        this.txtCelular.setText("");
        this.txtUsuario.setText("");
        this.txtPassword.setText("");
        this.cboSexo.setSelectedIndex(0);
        this.cboTipoUsuario.setSelectedIndex(-1);
        this.CboEstado.setSelectedIndex(0);
        this.perfilesSelected = new ArrayList();
        this.modelTablePerfilUser.setData(perfilesSelected);
        this.modelTablePerfilUser.fireTableDataChanged();
        this.control = "nuevo";
//        for (int i = 0; i < itemsMenuSelect.size(); i++) {
//            System.out.println("item ID: " + itemsMenuSelect.get(i).getId());
//            System.out.println("Descripcion: " + itemsMenuSelect.get(i).getDescripcion());
//        }
    }//GEN-LAST:event_btnNuevoUsuarioActionPerformed

    private void txtCelularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCelularActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCelularActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDireccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDireccionActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsuarioActionPerformed

    private void txtFechaNacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaNacActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaNacActionPerformed

    private void txtApellidosUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidosUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellidosUsuarioActionPerformed

    private void txtNombreUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreUsuarioActionPerformed

    private void tblEmpleadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEmpleadosMouseClicked
        // TODO add your handling code here:
        int fila = this.tblEmpleados.getSelectedRow();
        System.out.println("fila: " + fila);
        if (fila >= 0) {
            try {
                this.control = "modificar";
                UsuarioDesktop usuario = this.modelTableEmpleados.getValue(fila);
                this.txtNombreUsuario.setText(usuario.getNombres());
                this.txtApellidosUsuario.setText(usuario.getApellidos());
                this.txtFechaNac.setText(usuario.getFechNacimiento());
                this.txtEmail.setText(usuario.getEmail());
                this.txtDireccion.setText(usuario.getDireccion());
                this.txtCelular.setText(usuario.getCelular());
                this.txtUsuario.setText(usuario.getUsuario());
                this.txtPassword.setText(usuario.getPassword());
                switch (usuario.getSexo()) {
                    case "H":
                        this.cboSexo.setSelectedIndex(1);
                        break;
                    case "M":
                        this.cboSexo.setSelectedIndex(2);
                        break;
                    default:
                        this.cboSexo.setSelectedIndex(0);
                        break;
                }
                this.cboTipoUsuario.setSelectedItem(usuario.getTipoUser().getDescripcion());
                switch (usuario.getEstado()) {
                    case "A":
                        this.CboEstado.setSelectedIndex(1);
                        break;
                    case "D":
                        this.CboEstado.setSelectedIndex(2);
                        break;
                    default:
                        this.CboEstado.setSelectedIndex(0);
                        break;
                }

                this.perfilesSelected = new GestionPerfilUsuario().listarPorUsuario(usuario);
                this.modelTablePerfilUser.setData(perfilesSelected);
                this.modelTablePerfilUser.fireTableDataChanged();

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PanelUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(PanelUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_tblEmpleadosMouseClicked

    private void btnAddPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPerfilActionPerformed
        // TODO add your handling code here:
        PerfilUsuario obj = this.modelCboPerfilUser.getElement(this.cboPerfilUsuario.getSelectedIndex());
        this.perfilesSelected.add(obj);
        this.modelTablePerfilUser.setData(perfilesSelected);
        this.modelTablePerfilUser.fireTableDataChanged();
    }//GEN-LAST:event_btnAddPerfilActionPerformed

    private void btnSubirFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubirFotoActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Formatos de archivos JPEG(*.JPG,*.JPEG)", "jpg", "jpeg");
        FileNameExtensionFilter filtro2 = new FileNameExtensionFilter("Formatos de archivos PNG(*.PNG)", "png");
        JFileChooser ventana = new JFileChooser();
        ventana.addChoosableFileFilter(filtro2);
        ventana.addChoosableFileFilter(filtro);
        ventana.setDialogTitle("Elegir foto");
//        File ruta=new File("Imagenes");
//        ventana.setCurrentDirectory(ruta);
        int opcion = ventana.showOpenDialog(null);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            File archivo = ventana.getSelectedFile();
            this.urlFoto = String.valueOf(archivo);
            Image foto = getToolkit().getImage(this.urlFoto);
            String dirfotoactual = archivo.getPath().replace('\\', '/');
            foto = foto.getScaledInstance(150, 139, Image.SCALE_DEFAULT);
            this.lblFoto.setText("");
            this.lblFoto.setIcon(new ImageIcon(foto));
        }
//        System.out.println("url: " + urlFoto);
    }//GEN-LAST:event_btnSubirFotoActionPerformed

    private void btnQuitarPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarPerfilActionPerformed
        // TODO add your handling code here:
        int row = this.tblPerfilesUsuario.getSelectedRow();
        this.perfilesSelected.remove(row);
        this.modelTablePerfilUser.setData(perfilesSelected);
        this.modelTablePerfilUser.fireTableDataChanged();
    }//GEN-LAST:event_btnQuitarPerfilActionPerformed

    private void btnEliminarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarUsuarioActionPerformed
        // TODO add your handling code here:
        int row = this.tblEmpleados.getSelectedRow();
        if (row >= 0) {
            try {
                UsuarioDesktop user = this.modelTableEmpleados.getValue(row);
                if (this.perfilesSelected.size() > 0) {
                    GestionDetallePerfilUsuario gestionperfiluser=new GestionDetallePerfilUsuario();
                    DetallePerfilUsuario objdel=new DetallePerfilUsuario();
                    PerfilUsuario p = new PerfilUsuario();
                    p.setIdprefil(0);
                    objdel.setPerfil(p);
                    objdel.setEstado("A");
                    objdel.setTipoOperacion("e");
                    objdel.setUsuario(user);
                    gestionperfiluser.eliminar(objdel);
                }                
                GestionUsuarioDesktop gestion = new GestionUsuarioDesktop();
                gestion.eliminar(user);
                this.modelTableEmpleados.setData(gestion.listar());
                this.modelTableEmpleados.fireTableDataChanged();
                this.txtNombreUsuario.setText("");
                this.txtApellidosUsuario.setText("");
                this.txtFechaNac.setText("");
                this.txtEmail.setText("");
                this.txtDireccion.setText("");
                this.txtCelular.setText("");
                this.txtUsuario.setText("");
                this.txtPassword.setText("");
                this.cboSexo.setSelectedIndex(0);
                this.cboTipoUsuario.setSelectedIndex(-1);
                this.CboEstado.setSelectedIndex(0);
                this.perfilesSelected = new ArrayList();
                this.modelTablePerfilUser.setData(perfilesSelected);
                this.modelTablePerfilUser.fireTableDataChanged();
                this.control = "nuevo";
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PanelUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(PanelUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnEliminarUsuarioActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox CboEstado;
    private javax.swing.JButton btnAddPerfil;
    private javax.swing.JButton btnEliminarUsuario;
    private javax.swing.JButton btnGuardarUsuario;
    private javax.swing.JButton btnNuevoUsuario;
    private javax.swing.JButton btnQuitarPerfil;
    private javax.swing.JButton btnSubirFoto;
    private javax.swing.JComboBox cboLocal;
    private javax.swing.JComboBox cboPerfilUsuario;
    private javax.swing.JComboBox cboSexo;
    private javax.swing.JComboBox cboTipoUsuario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JLabel logoalmacen;
    private javax.swing.JPanel panelContainerJtree;
    private javax.swing.JPanel paneltitlealmacen;
    private javax.swing.JTable tblEmpleados;
    private javax.swing.JTable tblPerfilesUsuario;
    private javax.swing.JTextField txtApellidosUsuario;
    private javax.swing.JTextField txtCelular;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFechaNac;
    private javax.swing.JTextField txtNombreUsuario;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
//
//
//enum Status {
//
//    SELECTED, DESELECTED, INDETERMINATE
//}
//
//class CheckBoxNode {
//
//    public final String label;
//    public final Status status;
//
//    public CheckBoxNode(String label) {
//        this.label = label;
//        status = Status.INDETERMINATE;
//    }
//
//    public CheckBoxNode(String label, Status status) {
//        this.label = label;
//        this.status = status;
//    }
//
//    @Override
//    public String toString() {
//        return label;
//    }
//}
//
//class CheckTreeSelectionModel extends DefaultTreeSelectionModel {
//
//    private TreeModel model;
//
//    public CheckTreeSelectionModel(TreeModel model) {
//        this.model = model;
//        setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
//    }
//
//    // tests whether there is any unselected node in the subtree of given path 
//    public boolean isPartiallySelected(TreePath path) {
//        if (isPathSelected(path, true)) {
//            return false;
//        }
//        TreePath[] selectionPaths = getSelectionPaths();
//        if (selectionPaths == null) {
//            return false;
//        }
//        for (int j = 0; j < selectionPaths.length; j++) {
//            if (isDescendant(selectionPaths[j], path)) {
//                return true;
//            }
//        }
//        return false;
//    }
//
//    // tells whether given path is selected. 
//    // if dig is true, then a path is assumed to be selected, if 
//    // one of its ancestor is selected. 
//    public boolean isPathSelected(TreePath path, boolean dig) {
//        if (!dig) {
//            return super.isPathSelected(path);
//        }
//        while (path != null && !super.isPathSelected(path)) {
//            path = path.getParentPath();
//        }
//        return path != null;
//    }
//
//    // is path1 descendant of path2 
//    private boolean isDescendant(TreePath path1, TreePath path2) {
//        Object obj1[] = path1.getPath();
//        Object obj2[] = path2.getPath();
//        for (int i = 0; i < obj2.length; i++) {
//            if (obj1[i] != obj2[i]) {
//                return false;
//            }
//        }
//        return true;
//    }
//
//    @Override
//    public void setSelectionPaths(TreePath[] pPaths) {
//        clearSelection();
//        for (int i = 0; i < pPaths.length; i++) {
//            addSelectionPath(pPaths[i]);
//        }
//    }
//
//    @Override
//    public void addSelectionPaths(TreePath[] paths) {
//        // unselect all descendants of paths[] 
//        for (int i = 0; i < paths.length; i++) {
//            TreePath path = paths[i];
//            TreePath[] selectionPaths = getSelectionPaths();
//            if (selectionPaths == null) {
//                break;
//            }
//            ArrayList toBeRemoved = new ArrayList();
//            for (int j = 0; j < selectionPaths.length; j++) {
//                if (isDescendant(selectionPaths[j], path)) {
//                    toBeRemoved.add(selectionPaths[j]);
//                }
//            }
//            super.removeSelectionPaths((TreePath[]) toBeRemoved.toArray(new TreePath[0]));
//        }
//
//        // if all siblings are selected then unselect them and select parent recursively 
//        // otherwize just select that path. 
//        for (int i = 0; i < paths.length; i++) {
//            TreePath path = paths[i];
//            TreePath temp = null;
//            while (areSiblingsSelected(path)) {
//                temp = path;
//                if (path.getParentPath() == null) {
//                    break;
//                }
//                path = path.getParentPath();
//            }
//            if (temp != null) {
//                if (temp.getParentPath() != null) {
//                    addSelectionPath(temp.getParentPath());
//                } else {
//                    if (!isSelectionEmpty()) {
//                        removeSelectionPaths(getSelectionPaths());
//                    }
//                    super.addSelectionPaths(new TreePath[]{temp});
//                }
//            } else {
//                super.addSelectionPaths(new TreePath[]{path});
//            }
//        }
//    }
//
//    // tells whether all siblings of given path are selected. 
//    private boolean areSiblingsSelected(TreePath path) {
//        TreePath parent = path.getParentPath();
//        if (parent == null) {
//            return true;
//        }
//        Object node = path.getLastPathComponent();
//        Object parentNode = parent.getLastPathComponent();
//
//        int childCount = model.getChildCount(parentNode);
//        for (int i = 0; i < childCount; i++) {
//            Object childNode = model.getChild(parentNode, i);
//            if (childNode == node) {
//                continue;
//            }
//            if (!isPathSelected(parent.pathByAddingChild(childNode))) {
//                return false;
//            }
//        }
//        return true;
//    }
//
//    @Override
//    public void removeSelectionPaths(TreePath[] paths) {
//        for (int i = 0; i < paths.length; i++) {
//            TreePath path = paths[i];
//            if (path.getPathCount() == 1) {
//                super.removeSelectionPaths(new TreePath[]{path});
//            } else {
//                toggleRemoveSelection(path);
//            }
//        }
//    }
//
//    // if any ancestor node of given path is selected then unselect it 
//    //  and selection all its descendants except given path and descendants. 
//    // otherwise just unselect the given path 
//    private void toggleRemoveSelection(TreePath path) {
//        Stack stack = new Stack();
//        TreePath parent = path.getParentPath();
//        while (parent != null && !isPathSelected(parent)) {
//            stack.push(parent);
//            parent = parent.getParentPath();
//        }
//        if (parent != null) {
//            stack.push(parent);
//        } else {
//            super.removeSelectionPaths(new TreePath[]{path});
//            return;
//        }
//
//        while (!stack.isEmpty()) {
//            TreePath temp = (TreePath) stack.pop();
//            TreePath peekPath = stack.isEmpty() ? path : (TreePath) stack.peek();
//            Object node = temp.getLastPathComponent();
//            Object peekNode = peekPath.getLastPathComponent();
//            int childCount = model.getChildCount(node);
//            for (int i = 0; i < childCount; i++) {
//                Object childNode = model.getChild(node, i);
//                if (childNode != peekNode) {
//                    super.addSelectionPaths(new TreePath[]{temp.pathByAddingChild(childNode)});
//                }
//            }
//        }
//        super.removeSelectionPaths(new TreePath[]{parent});
//    }
//}
//
//class CheckTreeCellRenderer extends JPanel implements TreeCellRenderer {
//
//    private CheckTreeSelectionModel selectionModel;
//    private TreeCellRenderer delegate;
//    private TristateCheckBox checkBox = new TristateCheckBox();
//
//    public CheckTreeCellRenderer(TreeCellRenderer delegate, CheckTreeSelectionModel selectionModel) {
//        this.delegate = delegate;
//        this.selectionModel = selectionModel;
//        setLayout(new BorderLayout());
//        setOpaque(false);
////        checkBox.setOpaque(false);
//    }
//
//    @Override
//    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
//        Component renderer = delegate.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
//
//        TreePath path = tree.getPathForRow(row);
//        if (path != null) {
//            if (selectionModel.isPathSelected(path, true)) {
//                checkBox.setState(TristateCheckBox.SELECTED);
//            } else {
//                checkBox.setState(selectionModel.isPartiallySelected(path) ? null : TristateCheckBox.NOT_SELECTED);
//            }
//        }
//        removeAll();
//        add(checkBox, BorderLayout.WEST);
//        add(renderer, BorderLayout.CENTER);
//        return this;
//    }
//}
//
//class CheckTreeManager extends MouseAdapter implements TreeSelectionListener {
//
//    private CheckTreeSelectionModel selectionModel;
//    private JTree tree = new JTree();
//    int hotspot = new JCheckBox().getPreferredSize().width;
//
//    public CheckTreeManager(JTree tree) {
//        this.tree = tree;
//        selectionModel = new CheckTreeSelectionModel(tree.getModel());
//        tree.setCellRenderer(new CheckTreeCellRenderer(tree.getCellRenderer(), selectionModel));
//        tree.addMouseListener(this);
//        selectionModel.addTreeSelectionListener(this);
//    }
//
//    @Override
//    public void mouseClicked(MouseEvent me) {
//        TreePath path = tree.getPathForLocation(me.getX(), me.getY());
//        if (path == null) {
//            return;
//        }
//        if (me.getX() > tree.getPathBounds(path).x + hotspot) {
//            return;
//        }
//
//        boolean selected = selectionModel.isPathSelected(path, true);
//        selectionModel.removeTreeSelectionListener(this);
//
//        try {
//            if (selected) {
//                selectionModel.removeSelectionPath(path);
//            } else {
//                selectionModel.addSelectionPath(path);
//            }
//        } finally {
//            selectionModel.addTreeSelectionListener(this);
//            tree.treeDidChange();
//        }
//    }
//
//    public CheckTreeSelectionModel getSelectionModel() {
//        return selectionModel;
//    }
//
//    @Override
//    public void valueChanged(TreeSelectionEvent e) {
//        tree.treeDidChange();
//    }
//}
//
//class TristateCheckBox extends JCheckBox  {
//
//    public static class State {
//
//        private State() {
//        }
//    }
//    public static final TristateCheckBox.State NOT_SELECTED = new TristateCheckBox.State();
//    public static final TristateCheckBox.State SELECTED = new TristateCheckBox.State();
//    public static final TristateCheckBox.State DONT_CARE = new TristateCheckBox.State();
//    private final TristateCheckBox.TristateDecorator model;
//
//    public TristateCheckBox(String text, Icon icon, TristateCheckBox.State initial) {
//        super(text, icon);
//        // Add a listener for when the mouse is pressed
//        super.addMouseListener(new MouseAdapter() {
//            @Override
//            public void mousePressed(MouseEvent e) {
//                grabFocus();
//                model.nextState();
//            }
//        });
//        // Reset the keyboard action map
//        ActionMap map = new ActionMapUIResource();
//        map.put("pressed", new AbstractAction() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                grabFocus();
//                model.nextState();
//            }
//        });
//        map.put("released", null);
//        SwingUtilities.replaceUIActionMap(this, map);
//        // set the model to the adapted model
//        model = new TristateCheckBox.TristateDecorator(getModel());
//        setModel(model);
//        setState(initial);
//    }
//
//    public TristateCheckBox(String text, TristateCheckBox.State initial) {
//        this(text, null, initial);
//    }
//
//    public TristateCheckBox(String text) {
//        this(text, DONT_CARE);
//    }
//
//    public TristateCheckBox() {
//        this(null);
//    }
//
//    /**
//     * No one may add mouse listeners, not even Swing!
//     */
//    @Override
//    public void addMouseListener(MouseListener l) {
//    }
//
//    /**
//     * Set the new state to either SELECTED, NOT_SELECTED or DONT_CARE. If state
//     * == null, it is treated as DONT_CARE.
//     */
//    public void setState(TristateCheckBox.State state) {
//        model.setState(state);
//    }
//
//    /**
//     * Return the current state, which is determined by the selection status of
//     * the model.
//     */
//    public TristateCheckBox.State getState() {
//        return model.getState();
//    }
//
//    @Override
//    public void setSelected(boolean b) {
//        if (b) {
//            setState(SELECTED);
//        } else {
//            setState(NOT_SELECTED);
//        }
//    }
//
//
//    /**
//     * Exactly which Design Pattern is this? Is it an Adapter, a Proxy or a
//     * Decorator? In this case, my vote lies with the Decorator, because we are
//     * extending functionality and "decorating" the original model with a more
//     * powerful model.
//     */
//    private class TristateDecorator implements ButtonModel {
//
//        private final ButtonModel other;
//
//        private TristateDecorator(ButtonModel other) {
//            this.other = other;
//        }
//
//        private void setState(TristateCheckBox.State state) {
//            if (state == NOT_SELECTED) {
//                other.setArmed(false);
//                setPressed(false);
//                setSelected(false);
//            } else if (state == SELECTED) {
//                other.setArmed(false);
//                setPressed(false);
//                setSelected(true);
//            } else { // either "null" or DONT_CARE
//                other.setArmed(true);
//                setPressed(true);
//                setSelected(true);
//            }
//        }
//
//        /**
//         * The current state is embedded in the selection / armed state of the
//         * model.
//         *
//         * We return the SELECTED state when the checkbox is selected but not
//         * armed, DONT_CARE state when the checkbox is selected and armed (grey)
//         * and NOT_SELECTED when the checkbox is deselected.
//         */
//        private TristateCheckBox.State getState() {
//            if (isSelected() && !isArmed()) {
//                // normal black tick
//                return SELECTED;
//            } else if (isSelected() && isArmed()) {
//                // don't care grey tick
//                return DONT_CARE;
//            } else {
//                // normal deselected
//                return NOT_SELECTED;
//            }
//        }
//
//        /**
//         * We rotate between NOT_SELECTED, SELECTED and DONT_CARE.
//         */
//        private void nextState() {
//            TristateCheckBox.State current = getState();
//            if (current == NOT_SELECTED) {
//                setState(SELECTED);
//            } else if (current == SELECTED) {
//                setState(DONT_CARE);
//            } else if (current == DONT_CARE) {
//                setState(NOT_SELECTED);
//            }
//        }
//
//        /**
//         * Filter: No one may change the armed status except us.
//         */
//        @Override
//        public void setArmed(boolean b) {
//        }
//
//        /**
//         * We disable focusing on the component when it is not enabled.
//         */
//        @Override
//        public void setEnabled(boolean b) {
//            setFocusable(b);
//            other.setEnabled(b);
//        }
//
//        /**
//         * All these methods simply delegate to the "other" model that is being
//         * decorated.
//         */
//        @Override
//        public boolean isArmed() {
//            return other.isArmed();
//        }
//
//        @Override
//        public boolean isSelected() {
//            return other.isSelected();
//        }
//
//        @Override
//        public boolean isEnabled() {
//            return other.isEnabled();
//        }
//
//        @Override
//        public boolean isPressed() {
//            return other.isPressed();
//        }
//
//        public boolean isRollover() {
//            return other.isRollover();
//        }
//
//        @Override
//        public void setSelected(boolean b) {
//            other.setSelected(b);
//        }
//
//        @Override
//        public void setPressed(boolean b) {
//            other.setPressed(b);
//        }
//
//        public void setRollover(boolean b) {
//            other.setRollover(b);
//        }
//
//        public void setMnemonic(int key) {
//            other.setMnemonic(key);
//        }
//
//        public int getMnemonic() {
//            return other.getMnemonic();
//        }
//
//        public void setActionCommand(String s) {
//            other.setActionCommand(s);
//        }
//
//        public String getActionCommand() {
//            return other.getActionCommand();
//        }
//
//        public void setGroup(ButtonGroup group) {
//            other.setGroup(group);
//        }
//
//        public void addActionListener(ActionListener l) {
//            other.addActionListener(l);
//        }
//
//        public void removeActionListener(ActionListener l) {
//            other.removeActionListener(l);
//        }
//
//        public void addItemListener(ItemListener l) {
//            other.addItemListener(l);
//        }
//
//        public void removeItemListener(ItemListener l) {
//            other.removeItemListener(l);
//        }
//
//        public void addChangeListener(ChangeListener l) {
//            other.addChangeListener(l);
//        }
//
//        public void removeChangeListener(ChangeListener l) {
//            other.removeChangeListener(l);
//        }
//
//        public Object[] getSelectedObjects() {
//            return other.getSelectedObjects();
//        }
//    }
//}